@startuml

folder "com.shuhuan.ipaas.gateway" {

    abstract class ExecutionHandler
    abstract AbstractForkGateway


    ExecutionHandler <|-- AbstractForkGateway
    AbstractForkGateway <|-- ForCountGateway
    AbstractForkGateway <|-- ForeachGateway
    AbstractForkGateway <|-- InclusiveGateway
    AbstractForkGateway <|-- ParallelGateway
    AbstractForkGateway <|-- CatchErrorGateway
    AbstractForkGateway <|-- OnErrorGateway

    AbstractForkGateway <|-- JoinGateway

}

@enduml


@startuml

folder "com.shuhuan.ipaas.gateway" {

    abstract class ExecutionHandler{

        private String name;

        private String targetRef;

        private FlowInstance flow;

        private ExecutionHandler nextHandler;

        private String exceptionRef;

        public abstract boolean isAsync();

        public abstract FlowElementType getElementType();

        public abstract void execute(Execution ec, Consumer<Execution> callback) throws Exception;

        public void cascade();
    }

    abstract class AbstractForkGateway{

        private String joinAt;

        private Map<String, Semaphore> forkedSems;

        protected void processFork(Execution ec, ExecutionForkContext context, Consumer<Execution> callback);

    }

    class CatchErrorGateway{

        public CatchErrorGateway(FlowInstance flow, ForkGatewayPO po);

        public void execute(Execution ec, Consumer<Execution> callback);

    }

    class OnErrorGateway{

        public CatchErrorGateway(FlowInstance flow, ForkGatewayPO po);

        public void execute(Execution ec, Consumer<Execution> callback);


    }

    class JoinGateway{

        private Consumer<Execution> callback;

        private StatementList statements;

        private Execution ec;

    }

    class Execution{

        private String requestId;
        private Execution parent;
        private FlowInstance flow;
        private Map<String, Object> contextObjects;
        private Map<String, Object> globalContextObjects;

        private ExecutionRuntime runtime;
        private ExecutionStepContext currentStep;
        private ExecutionTriggerContext triggerContext;
        private ExecutionLogContext logContext;
        private AtomicBoolean finish;

        private Exception error;
        private boolean isFork = false;

        List<ExecutionForkContext> contexts;

        private ExpressionContext expressionContext;

    }


    enum FlowElementType{

        FOR_COUNT_GATEWAY("ForCountGateway"),

        JOIN_GATEWAY("JoinGateway"),

        CATCH_ERROR_GATEWAY("CatchErrorGateway"),

        ON_ERROR_GATEWAY("OnErrorGateway"),
    }


    ExecutionHandler <|-- AbstractForkGateway
    AbstractForkGateway <|-- CatchErrorGateway
    AbstractForkGateway <|-- OnErrorGateway
    AbstractForkGateway <|-- JoinGateway
    CatchErrorGateway *-- Execution
    OnErrorGateway *-- Execution
    JoinGateway *-- Execution
    ExecutionHandler *-- FlowElementType


}


@enduml

@startuml

folder "com.shuhuan.ipaas.gateway" {

    abstract class ExecutionHandler{

        private String name;

        private String targetRef;

        private FlowInstance flow;

        private ExecutionHandler nextHandler;

        private String exceptionRef;

        public abstract boolean isAsync();

        public abstract FlowElementType getElementType();

        public abstract void execute(Execution ec, Consumer<Execution> callback) throws Exception;

        public void cascade();
    }

    abstract class AbstractForkGateway{

        private String joinAt;

        private Map<String, Semaphore> forkedSems;

        protected void processFork(Execution ec, ExecutionForkContext context, Consumer<Execution> callback);

    }

    class CatchErrorGateway{

        public CatchErrorGateway(FlowInstance flow, ForkGatewayPO po);

        public void execute(Execution ec, Consumer<Execution> callback);

    }

    class OnErrorGateway{

        public CatchErrorGateway(FlowInstance flow, ForkGatewayPO po);

        public void execute(Execution ec, Consumer<Execution> callback);


    }

    class JoinGateway{

        private Consumer<Execution> callback;

        private StatementList statements;

        private Execution ec;

    }

    class Execution{

        private String requestId;
        private Execution parent;
        private FlowInstance flow;
        private Map<String, Object> contextObjects;
        private Map<String, Object> globalContextObjects;

        private ExecutionRuntime runtime;
        private ExecutionStepContext currentStep;
        private ExecutionTriggerContext triggerContext;
        private ExecutionLogContext logContext;
        private AtomicBoolean finish;

        private Exception error;
        private boolean isFork = false;

        List<ExecutionForkContext> contexts;

        private ExpressionContext expressionContext;

    }


    enum FlowElementType{

        FOR_COUNT_GATEWAY("ForCountGateway"),

        JOIN_GATEWAY("JoinGateway"),

        CATCH_ERROR_GATEWAY("CatchErrorGateway"),

        ON_ERROR_GATEWAY("OnErrorGateway"),
    }


    ExecutionHandler <|-- AbstractForkGateway
    AbstractForkGateway <|-- CatchErrorGateway
    AbstractForkGateway <|-- OnErrorGateway
    AbstractForkGateway <|-- JoinGateway
    CatchErrorGateway *-- Execution
    OnErrorGateway *-- Execution
    JoinGateway *-- Execution
    ExecutionHandler *-- FlowElementType


}


@enduml


@startuml

folder "com.shuhuan.ipaas.connector.spi.browserplugin" {

    interface ConnectorOperation {

        void execute(ConnectorRequest request, Consumer<ConnectorResponse> callback) throws IpaasException;

        default ConnectorRequest createRequest();
    }

    interface ConnectorProvider {
            public ConnectorOperation createConnectorOperation(String operation, Map<String, Object> asset, Map<String, Object> settings);
    }

    class BrowserOperationConnectorProvider implements ConnectorProvider{

    }

    interface ClientRobot extends ConnectorOperation{
        private ConcurrentHashMap<String, Thread> tasks;
        park();
        unPark(Thread waitThread);
    }

    interface BrowserOperationConnectorOperation extends ClientRobot{

    }

    interface WebPageOperationConnectorOperation extends ClientRobot{

    }


    class WakeUpFlowConsumer{}
    WakeUpFlowConsumer *-- ClientRobot


    class OpenNewWindowOperation implements BrowserOperationConnectorOperation {

        private ExecutionResultProducer executionResultProducer;

        public void execute(ConnectorRequest request, Consumer<ConnectorResponse> callback);

    }
    class executionResultProducer{}
    OpenNewWindowOperation *-- executionResultProducer


    class OpenNewTabOperation implements BrowserOperationConnectorOperation {
    }

    class ChangeTabOperation implements BrowserOperationConnectorOperation {
    }

    class CloseWindowOperation implements BrowserOperationConnectorOperation {
    }

    class CloseTabOperation implements BrowserOperationConnectorOperation {
    }

    class ForwardOperation implements BrowserOperationConnectorOperation {
    }

    class BackOperation implements BrowserOperationConnectorOperation {
    }

    class RefreshOperation implements BrowserOperationConnectorOperation {
    }

}


@enduml



@startuml


    class com.huawang.core.semantics.utils.ParseSysMLXUtil {

        public static Map<String, File> findSysMLx(String folderPath, Map<String, File> sysMLx) ;

        public static List<ElementNode> convert(File xmlFile) ;

        public static void convert2ElementNode(Node parentNode, Node node, List<ElementNode> elementNodes);


    }
    static class ElementNode {

        private String parentId;

        private String xmlId;

        private String classifierId;

        private String name;

        private List<Attribute> attributes;

        private List<ElementNode> children;

        private AddModelForm addModelForm;

        private UpdateValueForm updateValueForm;



        public static ElementNode createElementNode(String parentId, String xmlId, String classifierId, String name,
                                                    List<Attribute> attributes);

        private static UpdateValueForm buildUpdateValueForm(String xmlId, List<Attribute> attributes);

        public static AddModelForm buildAddModelForm(String parentId, String xmlId, String classifierId, String name);

    }

    static class Attribute {

        private String propertyName;

        private TypeEnum classifierId;

        private String value;
    }

    ElementNode *-- Attribute


@enduml



